import numpy as np

def objective_function(x):
    """
    Example objective function: Rosenbrock function.
    """
    return sum(100.0 * (x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)

class Particle:
    def __init__(self, dimension, bounds):
        """
        Initialize a particle with a random position and velocity within the given bounds.
        """
        self.position = np.random.uniform(bounds[:, 0], bounds[:, 1], dimension)
        self.velocity = np.random.uniform(-1, 1, dimension)
        self.best_position = np.copy(self.position)
        self.best_score = objective_function(self.position)

    def update_velocity(self, global_best_position, inertia_weight, cognitive_coeff, social_coeff):
        """
        Update the velocity of the particle.
        """
        r1, r2 = np.random.rand(len(self.position)), np.random.rand(len(self.position))
        cognitive = cognitive_coeff * r1 * (self.best_position - self.position)
        social = social_coeff * r2 * (global_best_position - self.position)
        self.velocity = inertia_weight * self.velocity + cognitive + social

    def update_position(self, bounds):
        """
        Update the particle's position and ensure it stays within bounds.
        """
        self.position += self.velocity
        self.position = np.clip(self.position, bounds[:, 0], bounds[:, 1])
        score = objective_function(self.position)

        if score < self.best_score:
            self.best_score = score
            self.best_position = np.copy(self.position)

class PSO:
    def __init__(self, num_particles, dimension, bounds, max_iter):
        """
        Initialize the swarm.
        """
        self.particles = [Particle(dimension, bounds) for _ in range(num_particles)]
        self.global_best_position = min(self.particles, key=lambda p: p.best_score).best_position
        self.global_best_score = objective_function(self.global_best_position)
        self.max_iter = max_iter

    def optimize(self, inertia_weight=0.7, cognitive_coeff=1.5, social_coeff=1.5):
        """
        Perform PSO optimization.
        """
        for iteration in range(self.max_iter):
            print(f"Iteration {iteration + 1}/{self.max_iter}")
            for i, particle in enumerate(self.particles):
                particle.update_velocity(self.global_best_position, inertia_weight, cognitive_coeff, social_coeff)
                particle.update_position(bounds)

                # Update global best if a better solution is found
                if particle.best_score < self.global_best_score:
                    self.global_best_score = particle.best_score
                    self.global_best_position = particle.best_position

                print(f"Particle {i+1}: Position = {particle.position}, Score = {particle.best_score}")
            print(f"Best Score so far: {self.global_best_score}\n")

        return self.global_best_position, self.global_best_score

if __name__ == "__main__":
    # Define problem dimensions
    dimension = 2
    bounds = np.array([[-2, 2], [-2, 2]])  # Define the search space

    # Create PSO optimizer instance
    pso = PSO(num_particles=5, dimension=dimension, bounds=bounds, max_iter=10)

    # Run optimization
    best_position, best_score = pso.optimize()

    # Output results
    print("\nFinal Best Position:", best_position)
    print("Final Best Score:", best_score)
