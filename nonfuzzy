#non fuzzy
import numpy as np

def objective_function(x):
    return np.sum(x**2)

class NonFuzzyAlgorithm:
    def __init__(self, num_agents, dimension, bounds, max_iter):
        self.num_agents = num_agents
        self.dimension = dimension
        self.bounds = bounds
        self.max_iter = max_iter
        self.agents = np.random.uniform(bounds[:, 0], bounds[:, 1], (num_agents, dimension))
        self.scores = np.apply_along_axis(objective_function, 1, self.agents)

        # Get best agent
        self.best_agent = self.agents[np.argmin(self.scores)]
        self.best_score = np.min(self.scores)

    def optimize(self, step_size=0.1):
        for iteration in range(self.max_iter):
            for i in range(self.num_agents):
                new_position = self.agents[i] + np.random.uniform(-step_size, step_size, self.dimension)
                new_position = np.clip(new_position, self.bounds[:, 0], self.bounds[:, 1])
                new_score = objective_function(new_position)

                if new_score < self.scores[i]:
                    self.agents[i] = new_position
                    self.scores[i] = new_score

                if new_score < self.best_score:
                    self.best_agent = new_position
                    self.best_score = new_score

            print(f"Iteration {iteration+1}/{self.max_iter}, Best Score: {self.best_score}")

        return self.best_agent, self.best_score

if __name__ == "__main__":
    dimension = 2
    bounds = np.array([[-2, 2], [-2, 2]])
    nfa = NonFuzzyAlgorithm(num_agents=5, dimension=dimension, bounds=bounds, max_iter=10)

    best_position, best_score = nfa.optimize()

    print("\nFinal Best Position:", best_position)
    print("Final Best Score:", best_score)
