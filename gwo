import numpy as np
def objective_function(x):
    """Example objective function: Rosenbrock function."""
    return sum(100.0 * (x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)
class Particle:
    def __init__(self, dimension, bounds):
        self.position = np.random.uniform(bounds[:, 0], bounds[:, 1], dimension)
        self.velocity = np.random.uniform(-1, 1, dimension)
        self.best_position = np.copy(self.position)
        self.best_score = objective_function(self.position)
    def update_velocity(self, global_best_position, inertia_weight, cognitive_coeff, social_coeff):
        r1, r2 = np.random.rand(len(self.position)), np.random.rand(len(self.position))
        cognitive = cognitive_coeff * r1 * (self.best_position - self.position)
        social = social_coeff * r2 * (global_best_position - self.position)
        self.velocity = inertia_weight * self.velocity + cognitive + social
    def update_position(self, bounds):
        self.position += self.velocity
        self.position = np.clip(self.position, bounds[:, 0], bounds[:, 1])
        score = objective_function(self.position)
        if score < self.best_score:
            self.best_score = score
            self.best_position = np.copy(self.position)
class PSO:
    def __init__(self, num_particles, dimension, bounds, max_iter):
        self.particles = [Particle(dimension, bounds) for _ in range(num_particles)]
        self.global_best_position = min(self.particles, key=lambda p: p.best_score).best_position
        self.global_best_score = objective_function(self.global_best_position)
        self.max_iter = max_iter

    def optimize(self, inertia_weight=0.7, cognitive_coeff=1.5, social_coeff=1.5):
        for _ in range(self.max_iter):
            for particle in self.particles:
                particle.update_velocity(self.global_best_position, inertia_weight, cognitive_coeff, social_coeff)
                particle.update_position(bounds)
                if particle.best_score < self.global_best_score:
                    self.global_best_score = particle.best_score
                    self.global_best_position = particle.best_position
        return self.global_best_position, self.global_best_score
if __name__ == "__main__":
    dimension = 2
    bounds = np.array([[-2, 2], [-2, 2]])
    pso = PSO(num_particles=30, dimension=dimension, bounds=bounds, max_iter=100)
    best_position, best_score = pso.optimize()
    print("Best Position:", best_position)
    print("Best Score:", best_score)
