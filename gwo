#grey wolf
import numpy as np

def objective_function(x):
    return sum(100.0 * (x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)

class GreyWolfOptimizer:
    def __init__(self, num_wolves, dimension, bounds, max_iter):
        self.num_wolves = num_wolves
        self.dimension = dimension
        self.bounds = bounds
        self.max_iter = max_iter
        self.wolves = np.random.uniform(bounds[:, 0], bounds[:, 1], (num_wolves, dimension))
        self.scores = np.apply_along_axis(objective_function, 1, self.wolves)
        self.alpha, self.beta, self.delta = self.get_best_wolves()

    def get_best_wolves(self):
        sorted_indices = np.argsort(self.scores)
        return self.wolves[sorted_indices[:3]]

    def optimize(self):
        for iteration in range(self.max_iter):
            a = 2 - iteration * (2 / self.max_iter)
            for i in range(self.num_wolves):
                A1, A2, A3 = a * (2 * np.random.rand(self.dimension) - 1), a * (2 * np.random.rand(self.dimension) - 1), a * (2 * np.random.rand(self.dimension) - 1)
                C1, C2, C3 = 2 * np.random.rand(self.dimension), 2 * np.random.rand(self.dimension), 2 * np.random.rand(self.dimension)

                D_alpha = abs(C1 * self.alpha - self.wolves[i])
                D_beta = abs(C2 * self.beta - self.wolves[i])
                D_delta = abs(C3 * self.delta - self.wolves[i])

                X1 = self.alpha - A1 * D_alpha
                X2 = self.beta - A2 * D_beta
                X3 = self.delta - A3 * D_delta

                self.wolves[i] = (X1 + X2 + X3) / 3
                self.wolves[i] = np.clip(self.wolves[i], self.bounds[:, 0], self.bounds[:, 1])

            self.scores = np.apply_along_axis(objective_function, 1, self.wolves)
            self.alpha, self.beta, self.delta = self.get_best_wolves()

            print(f"Iteration {iteration+1}/{self.max_iter}, Best Score: {objective_function(self.alpha)}")

        return self.alpha, objective_function(self.alpha)

if __name__ == "__main__":
    dimension = 2
    bounds = np.array([[-2, 2], [-2, 2]])
    gwo = GreyWolfOptimizer(num_wolves=5, dimension=dimension, bounds=bounds, max_iter=10)

    # Run optimization
    best_position, best_score = gwo.optimize()

    # Output results
    print("\nFinal Best Position:", best_position)
    print("Final Best Score:", best_score)
